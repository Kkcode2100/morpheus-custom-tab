<div class="addon-url-tab p-4">
  <h2>Security &amp; Sustainability</h2>
  
  {{#if error}}
    <div class="alert alert-danger">{{error}}</div>
  {{else}}
    <div class="addon-url-actions mb-3">
      <button id="secSusSecurityBtn" class="btn btn-primary me-2" disabled title="Loading...">
        Open Security Dashboard
      </button>
      <button id="secSusSustainabilityBtn" class="btn btn-secondary" disabled title="Loading...">
        Open Sustainability Dashboard
      </button>
    </div>
    
    <details id="secSusInfoDetails" open>
      <summary>Resolved Information</summary>
      <table class="table table-striped table-condensed mt-2" id="secSusInfoTable">
        <tbody>
        </tbody>
      </table>
    </details>
  {{/if}}
</div>

<style nonce="{{nonce}}">
.sec-sus-tab, .addon-url-tab { padding: 10px; }
.sec-sus-actions, .addon-url-actions { margin-bottom: 10px; display: flex; gap: 8px; }
#secSusInfoTable td { vertical-align: top; padding: 2px 6px; }
#secSusInfoDetails { margin-top: 8px; }
</style>

<script nonce="{{nonce}}">
(function(){
  function getPluginSettings() {
    try { return (window.morpheus && window.morpheus.pluginSettings) || {}; } catch(e) { return {}; }
  }
  function getInstanceContext() {
    try { return (window.morpheus && window.morpheus.instance) || {}; } catch(e) { return {}; }
  }
  function detectProvider(instance) {
    console.log('SecSus: Detecting provider for instance:', instance);
    
    // Try multiple detection methods
    var detectionMethods = [];
    
    // Method 1: Check cloud object
    var cloud = instance && (instance.cloud || instance.site || {});
    var code = cloud.providerCode || cloud.cloudProvider || cloud.code || cloud.name || '';
    detectionMethods.push('cloud.code: ' + code);
    
    // Method 2: Check instance type or provision type
    var instanceType = instance && (instance.instanceTypeCode || instance.provisionType || '');
    detectionMethods.push('instanceType: ' + instanceType);
    
    // Method 3: Check for GCP-specific properties
    var hasGcpProps = instance && (
      (instance.externalId && instance.externalId.toString().includes('google')) ||
      (instance.name && instance.name.toLowerCase().includes('google')) ||
      (instance.hostname && instance.hostname.includes('gcp'))
    );
    detectionMethods.push('hasGcpProps: ' + hasGcpProps);
    
    console.log('SecSus: Detection methods:', detectionMethods);
    
    code = (code || '').toLowerCase();
    instanceType = (instanceType || '').toLowerCase();
    
    if(code.indexOf('amazon') >= 0 || code.indexOf('aws') >= 0 || instanceType.indexOf('aws') >= 0) return 'aws';
    if(code.indexOf('azure') >= 0 || code.indexOf('arm') >= 0 || instanceType.indexOf('azure') >= 0) return 'azure';
    if(code.indexOf('google') >= 0 || code.indexOf('gcp') >= 0 || instanceType.indexOf('google') >= 0 || hasGcpProps) return 'gcp';
    
    // Additional detection based on instance name patterns
    var name = (instance && instance.name || '').toLowerCase();
    if(name.includes('google') || name.includes('gcp')) return 'gcp';
    if(name.includes('aws') || name.includes('amazon')) return 'aws';
    if(name.includes('azure')) return 'azure';
    
    console.log('SecSus: No provider detected, defaulting to empty');
    return '';
  }
  function read(obj, path) {
    try { return path.split('.').reduce(function(a,k){ return (a||{})[k]; }, obj); } catch(e){ return undefined; }
  }
  function resolveIdentifiers(instance, settings, provider) {
    console.log('SecSus: Resolving identifiers for provider:', provider, 'instance:', instance);
    
    var tags = instance && (instance.tags || instance.metadata || {});
    var region = instance && (instance.region && instance.region.code) || instance.region || read(instance,'cloud.regionCode') || read(instance,'cloud.region') || '';
    var zone = read(instance,'zone.name') || read(instance,'zone') || '';
    var instanceId = instance && (instance.externalId || instance.id || '');
    var instanceName = instance && (instance.name || '');
    var cloud = instance && instance.cloud || {};

    console.log('SecSus: Raw tags/metadata:', tags);
    console.log('SecSus: Region/zone:', {region: region, zone: zone});

    var data = { provider: provider, region: region, zone: zone, instanceId: instanceId, instanceName: instanceName };

    if(provider === 'aws') {
      data.accountId = tags[settings['keys.aws.accountId'] || 'aws:accountId'] || '';
      data.instanceId = tags[settings['keys.aws.instanceId'] || 'aws:instanceId'] || data.instanceId;
    } else if(provider === 'azure') {
      data.subscriptionId = tags[settings['keys.azure.subscriptionId'] || 'azure:subscriptionId'] || '';
      data.resourceGroup = tags[settings['keys.azure.resourceGroup'] || 'azure:resourceGroup'] || '';
      data.vmName = tags[settings['keys.azure.vmName'] || 'azure:vmName'] || instanceName || '';
      data.resourceId = tags['azure:resourceId'] || '';
    } else if(provider === 'gcp') {
      data.projectId = tags[settings['keys.gcp.projectId'] || 'gcp:projectId'] || '';
      data.billingAccountId = tags[settings['keys.gcp.billingAccountId'] || 'gcp:billingAccountId'] || '';
      data.instanceName = tags[settings['keys.gcp.instanceName'] || 'gcp:instanceName'] || instanceName || '';
      data.orgId = tags[settings['keys.gcp.orgId'] || 'gcp:orgId'] || '';
      
      // If no tags found, try to extract from other properties
      if(!data.projectId && !data.billingAccountId) {
        // Try to extract project ID from zone or region
        if(zone && zone.includes('-')) {
          var zoneParts = zone.split('-');
          if(zoneParts.length >= 2) {
            data.projectId = 'extracted-from-zone'; // Placeholder for manual configuration
          }
        }
        
        // Try to extract from instance external ID or other properties  
        if(instanceId && instanceId.includes('google')) {
          data.projectId = 'extracted-from-id'; // Placeholder for manual configuration
        }
      }
    }

    console.log('SecSus: Resolved identifiers:', data);
    return data;
  }
  function interpolate(template, ids) {
    if(!template) return '';
    var result = template.replace(/\{(.*?)\}/g, function(_, key){ return ids[key] || ''; });
    console.log('SecSus: Interpolated template:', template, '->', result);
    return result;
  }
  function requiredOk(provider, ids) {
    var result = false;
    if(provider === 'aws') result = !!ids.region;
    if(provider === 'azure') result = true;
    if(provider === 'gcp') result = !!ids.projectId || !!ids.billingAccountId;
    
    console.log('SecSus: Required check for', provider, ':', result, 'ids:', ids);
    return result;
  }
  function setButton(id, url, enabled, tooltip) {
    var el = document.getElementById(id);
    if(!el) {
      console.log('SecSus: Button not found:', id);
      return;
    }
    
    console.log('SecSus: Setting button', id, 'enabled:', enabled, 'url:', url, 'tooltip:', tooltip);
    
    el.disabled = !enabled;
    if(tooltip) el.setAttribute('title', tooltip); else el.removeAttribute('title');
    el.onclick = null; // Clear any existing handlers
    if(enabled && url) {
      el.addEventListener('click', function(){ 
        console.log('SecSus: Opening URL:', url);
        window.open(url, '_blank', 'noopener'); 
      });
      // Visual indication that button is clickable
      el.style.cursor = 'pointer';
    } else {
      el.style.cursor = 'not-allowed';
    }
  }
  function populateInfo(ids) {
    var tbody = document.querySelector('#secSusInfoTable tbody');
    if(!tbody) {
      console.log('SecSus: Info table tbody not found');
      return;
    }
    
    // Add to existing content rather than replacing it
    var keys = ['provider','region','zone','accountId','instanceId','subscriptionId','resourceGroup','vmName','resourceId','projectId','billingAccountId','instanceName','orgId'];
    keys.forEach(function(k){
      if(ids[k] && ids[k] !== '') {
        var tr = document.createElement('tr');
        var td1 = document.createElement('td'); td1.textContent = k;
        var td2 = document.createElement('td'); td2.textContent = ids[k] || '';
        tr.appendChild(td1); tr.appendChild(td2); tbody.appendChild(tr);
      }
    });
    
    console.log('SecSus: Populated info table with', Object.keys(ids).length, 'entries');
  }

  function init() {
    console.log('SecSus: Initializing Security & Sustainability Tab');
    console.log('SecSus: Current URL:', window.location.href);
    console.log('SecSus: Morpheus object:', window.morpheus);
    
    var settings = getPluginSettings();
    var instance = getInstanceContext();
    
    console.log('SecSus: Plugin settings:', settings);
    console.log('SecSus: Instance context:', instance);
    
    var provider = detectProvider(instance);
    var ids = resolveIdentifiers(instance, settings, provider);
    
    // Enhanced debug logging
    console.log('=== Security & Sustainability Tab Debug ===');
    console.log('Provider detected:', provider);
    console.log('Instance object:', instance);
    console.log('Plugin settings:', settings);
    console.log('Resolved identifiers:', ids);
    console.log('===========================================');

    var awsSecTpl = settings.awsSecurityUrlTemplate || 'https://{region}.console.aws.amazon.com/securityhub/home?region={region}';
    var awsSusTpl = settings.awsSustainabilityUrlTemplate || 'https://console.aws.amazon.com/billing/home#/carbon';
    var azSecTpl = settings.azureSecurityUrlTemplate || 'https://portal.azure.com/#view/Microsoft_Azure_Security/SecurityMenuBlade/~/overview';
    var azSusTpl = settings.azureSustainabilityUrlTemplate || 'https://portal.azure.com/#blade/Microsoft_Azure_Sustainability/EmissionsImpactDashboardBlade/Overview';
    var gcpSecTpl = settings.gcpSecurityUrlTemplate || 'https://console.cloud.google.com/security/command-center/findings?project={projectId}&organizationId={orgId}';
    var gcpSusTpl = settings.gcpSustainabilityUrlTemplate || 'https://console.cloud.google.com/billing/{billingAccountId}/carbonfootprint?project={projectId}';

    var securityUrl = '';
    var sustainUrl = '';
    if(provider === 'aws') { securityUrl = interpolate(awsSecTpl, ids); sustainUrl = interpolate(awsSusTpl, ids); }
    if(provider === 'azure') { securityUrl = interpolate(azSecTpl, ids); sustainUrl = interpolate(azSusTpl, ids); }
    if(provider === 'gcp') { securityUrl = interpolate(gcpSecTpl, ids); sustainUrl = interpolate(gcpSusTpl, ids); }

    var ok = requiredOk(provider, ids);
    
    console.log('SecSus: Final URLs - Security:', securityUrl, 'Sustainability:', sustainUrl);
    console.log('SecSus: Requirements OK:', ok);
    
    setButton('secSusSecurityBtn', securityUrl, ok && !!securityUrl, ok ? '' : 'Missing required identifiers for '+provider);
    setButton('secSusSustainabilityBtn', sustainUrl, ok && !!sustainUrl, ok ? '' : 'Missing required identifiers for '+provider);

    if(settings.showResolvedInfo !== false) populateInfo(ids);
    
    // Add troubleshooting message if nothing was detected
    if(!provider || (!ok && provider)) {
      console.warn('SecSus: TROUBLESHOOTING - No provider detected or missing identifiers');
      console.warn('SecSus: For GCP instances, ensure tags exist: gcp:projectId, gcp:billingAccountId');
      console.warn('SecSus: Instance object structure:', JSON.stringify(instance, null, 2));
    }
  }

  if(document.readyState === 'loading') document.addEventListener('DOMContentLoaded', init); else init();
})();
</script>